/*
Voilà un exemple de l 'utilisation du package Dart web3
avec la blockchain privée de Talao et le token Talao de test


Le but est de calculer la cle privée Ethereum associée a la meme cle JWK 
qui est utilisé dans le wallet pour generer le did:tz:tz2
Ethereum et Tezos(tz2) utilise la meme courbe EC secp256k1

On pourra ensuite acheter en token un VC en transferant des tokens TALAO

*/
import 'dart:convert';
import 'package:http/http.dart';
import 'package:web3dart/web3dart.dart';
import 'dart:io';
import 'package:hex/hex.dart';

void main() async {
  // init with talaonet blockchain rpc AWS
  var apiUrl = "https://talao.co/rpc";
  var httpClient = Client();
  var ethClient = Web3Client(apiUrl, httpClient);

  /* first we reuse the JWK generated by the wallet for the did:tz, 
  to get the ethereum key associated with the JWK*/
  // for instance : 
  const senderJwk = {
    'crv': 'secp256k1',
    'd': '8POOMms0FeS6fmIN7neX7PROjMrFE9c2q4L58R0iVXo',
    'kty': 'EC',
    'x': 'gmQ9LW8cvcZElSrFu-qSEtEM2KN90jVFV--Ap3cSLis',
    'y': 'W7mcKtpQwZTrRxjsYkm549lQQLIcuEFo9Ts3tyopOxw',
    'alg': 'ES256K-R'
  };
  final toDecode = senderJwk['d']! + '=' * ((4 - senderJwk["d"]!.length) % 4);
  final _senderPrivateKey = base64Url.decode(toDecode);
  // this is the ethereum private key we need
  final senderEthereumPrivateKey = '0x' + HEX.encode(List.from(_senderPrivateKey));

  // now we can use the web3dart package https://pub.dev/packages/web3dart
  Credentials privateKey = EthPrivateKey.fromHex(senderEthereumPrivateKey);
  // this is the Ethereum address of the wallet
  final address = await privateKey.extractAddress();
  print("address = $address");
  // pour info did:ethr:<address> est le DID du wallet sur ethereum

  // ETH balance of sender, si cette balance est nulle il n est pas possible de
  // de faire un transfert
  var balance = await ethClient.getBalance(address);
  print("balance sender = $balance");

  // Talao token contract on talaonet
  // il faut que cette balance soit supéerieure au cout du VC
  final EthereumAddress contractAddr =
      EthereumAddress.fromHex('0x6F4148395c94a455dc224A56A6623dEC2395b99B');
  // upload Talao contract ABI
  final File abiFile = File('abi.json');
  final abiCode = await abiFile.readAsString();
  // setup Talao token contract
  final contract =
      DeployedContract(ContractAbi.fromJson(abiCode, 'Talao'), contractAddr);
  // Talao token functions
  final balanceFunction = contract.function('balanceOf');
  final transferFunction = contract.function('transfer');

  //  setup a receiver account for testing
  // c est le compte ethereum de l'issuer
  final EthereumAddress receiver =
      EthereumAddress.fromHex('0x461B99bCBdaD9697d299FDFe0879eC04De256DA1');

  // get sender balance in token Talao
  final senderbalance = await ethClient
      .call(contract: contract, function: balanceFunction, params: [address]);
  print('sender has $senderbalance Talao');

  // get receiver balance in token Talao
  final receiverbalance = await ethClient
      .call(contract: contract, function: balanceFunction, params: [receiver]);
  print('before receiver has $receiverbalance Talao');

  // transfer 1 TALAO token from sender to receiver
  final hash = await ethClient.sendTransaction(
      privateKey,
      Transaction.callContract(
          contract: contract,
          function: transferFunction,
          parameters: [receiver, BigInt.from(1)],
          gasPrice: EtherAmount.inWei(BigInt.from(2))),
      chainId: 50000);
  // the hash is the receipt for the payment_receipt
  // ce hash sera ensuitre verifier par l 'issuer 
  print("hash = $hash");

  // wait for transaction to be mint for testing purpose
  sleep(Duration(seconds: 10));

  // get final token balance for receiver to check if everything is ok
  final receiverbalanceafter = await ethClient
      .call(contract: contract, function: balanceFunction, params: [receiver]);
  // Congratualation !!!!
  //
  print('After receiver has $receiverbalanceafter Talao');

}
